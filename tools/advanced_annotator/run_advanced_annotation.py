# tools/advanced_annotator/run_advanced_annotation.py
from datetime import datetime
from tools.ml_pipelines.pipelines_axis3_pathology import Axis3PathologyPipeline

def run_pathology_annotation(patient_id):
    """
    A simplified pipeline that works directly with the available
    pathology matrix to generate an annotation.
    """
    print(f"--- Running Pathology-Based Annotation for patient: {patient_id} ---")

    try:
        # Axis 3 is generated by the pathology pipeline
        axis3_pipeline = Axis3PathologyPipeline()
        axis3 = axis3_pipeline.predict(patient_id)
        print("âœ… Axis 3 (Phenotype) annotation generated from pathology data.")

        # As we don't have other data, the other axes are placeholders
        axis1 = "Etiology (requires clinical/genetic data)"
        axis2 = "Molecular Profile (requires clinical/genetic data)"

        timestamp = datetime.now().strftime('%Y-%m-%d')
        full_annotation = f"[{timestamp}]: {axis1} / {axis2} / {axis3}"

        print("\n--- FINAL PATHOLOGY-DRIVEN ANNOTATION ---")
        print(full_annotation)
        print("-----------------------------------------")

    except Exception as e:
        print(f"An error occurred: {e}")
        print("Please ensure 'data/cornblath/pathology_matrix.csv' exists and was created correctly.")

if __name__ == '__main__':
    # --- FIX: Use a patient ID that we know exists in the file ---
    sample_patient_id = 2
    run_pathology_annotation(patient_id=sample_patient_id)